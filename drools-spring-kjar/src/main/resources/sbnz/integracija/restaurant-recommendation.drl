//created on: May 23, 2021
package sbnz.integracija

//list any import classes here.
import java.util.List;
import sbnz.integracija.example.model.Restaurant;
import sbnz.integracija.example.model.PriceCategory;
import sbnz.integracija.example.model.User;
import sbnz.integracija.example.model.Order;


//declare any global variables here
declare PreviousRestaurants
	number : int
	category : PriceCategory
	userId : long
end

rule "Calculate number of previous orders from cheap restaurants for users"

    when
        $u: User($uId : id)
        accumulate (Order(user.id == $uId, $resId : restaurant.id) and
        			Restaurant($r: this, $resId == id, priceCategory == PriceCategory.CHEAP ),
        			$set : collectList($r)
         			
        )
    then
       insert( new PreviousRestaurants($set.size(), PriceCategory.CHEAP, $uId));
       System.out.println("Narucivao je iz jeftinih  id usera " + $uId + " broj jeftinih " + $set.size());
end

rule "Calculate number of previous orders from standard restaurants for users"

    when
        $u: User($uId : id)
        $cheap : Number() from accumulate (
        		Order(user.id == $uId, $resId : restaurant.id) and 
        		Restaurant($r: this, $resId == id, priceCategory == PriceCategory.STANDARD ),
       			count($r)	
        
        )      
    then
    	insert( new PreviousRestaurants($cheap.intValue(), PriceCategory.STANDARD, $uId));
        System.out.println("Narucivao je iz standardnih, user id " + $uId + " broj standardnih " + $cheap.intValue() );  
end

rule "Calculate number of previous orders from expensive restaurants for users"

    when
        $u: User($uId : id)
        $cheap : Number() from accumulate (
        		Order(user.id == $uId, $resId : restaurant.id) and 
        		Restaurant($r: this, $resId == id, priceCategory == PriceCategory.EXPENSIVE ),
       			count($r)	
        
        )        
    then
    	insert( new PreviousRestaurants($cheap.intValue(), PriceCategory.EXPENSIVE, $uId));
        System.out.println("Narucivao je iz skupih, user id " + $uId + " broj skupih " + $cheap.intValue() );  
end

rule "Reccommend expensive restaurants when most of orders from expensive restaurants"
	when
		$u : User($id : id)
		PreviousRestaurants(userId == $id, category == PriceCategory.EXPENSIVE, $expensive : number)
		PreviousRestaurants(userId == $id, category == PriceCategory.CHEAP, $cheap : number)
		PreviousRestaurants(userId == $id, category == PriceCategory.STANDARD, $standard : number)
		eval($expensive > $cheap) 
		eval($expensive > $standard)
	then
		System.out.println("Korisnik pretezno narucuje iz skupih restorana");
end

rule "Reccommend cheap restaurants when most of orders from cheap restaurants"
	when
		$u : User($id : id)
		PreviousRestaurants(userId == $id, category == PriceCategory.EXPENSIVE, $expensive : number)
		PreviousRestaurants(userId == $id, category == PriceCategory.CHEAP, $cheap : number)
		PreviousRestaurants(userId == $id, category == PriceCategory.STANDARD, $standard : number)
		eval($cheap > $expensive) 
		eval($cheap > $standard)
	then
		System.out.println("Korisnik pretezno narucuje iz jeftinih restorana");
end

rule "Reccommend standard restaurants when most of orders from standard restaurants"
	when
		$u : User($id : id)
		PreviousRestaurants(userId == $id, category == PriceCategory.EXPENSIVE, $expensive : number)
		PreviousRestaurants(userId == $id, category == PriceCategory.CHEAP, $cheap : number)
		PreviousRestaurants(userId == $id, category == PriceCategory.STANDARD, $standard : number)
		eval($standard > $expensive) 
		eval($standard > $cheap)
	then
		System.out.println("Korisnik pretezno narucuje iz standardnih restorana");
end

